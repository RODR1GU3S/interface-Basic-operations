package application;

import java.util.HashSet;
import java.util.Set;

public class Program {

	public static void main(String[] args) {

		Set<String> set = new HashSet<>();

		System.out.println("Exemplo 01:");

		set.add("Tv");
		set.add("Notebook");
		set.add("Tablet");

		set.remove("Tablet");
		
		for (String p : set) {
			System.out.println(p);
		}
		System.out.println();

/*--------------------------------------------------------------------------------------------------------------------------------*/
		
		System.out.println("Exemplo 02:");
		
		set.add("Tv");
		set.add("Notebook");
		set.add("Tablet");
		
		
		set.removeIf(x -> x.length() >= 3);

		for (String p : set) {
			System.out.println(p);
		}
		System.out.println();
		
/*--------------------------------------------------------------------------------------------------------------------------------*/
		
		System.out.println("Exemplo 03:");
		
		set.add("Tv");
		set.add("Notebook");
		set.add("Tablet");
		
		
		set.removeIf(x -> x.charAt(0) >= 'T');

		for (String p : set) {
			System.out.println(p);
		}
		System.out.println();

	}

}
/*       >>>>>     üß† Essas s√£o opera√ß√µes "individuais", que lidam com elementos um a um.     <<<<<

‚úÖ 1. Opera√ß√µes (Operations)
S√£o as opera√ß√µes b√°sicas e gerais que podem ser feitas com qualquer tipo de cole√ß√£o (Collection), incluindo Set, List, etc.

üìå Exemplos:
add(E e) ‚Äì adiciona um elemento.

remove(Object o) ‚Äì remove um elemento espec√≠fico.

clear() ‚Äì remove todos os elementos.

contains(Object o) ‚Äì verifica se um elemento est√° presente.

isEmpty() ‚Äì verifica se a cole√ß√£o est√° vazia.

size() ‚Äì retorna o n√∫mero de elementos.

iterator() ‚Äì fornece um iterador para percorrer os elementos.


*/

/*--------------------------------------------------------------------------------------------------------------------------------*/

/*

## ‚úÖ Exemplo 01:

set.add("Tv");
set.add("Notebook");
set.add("Tablet");

set.remove("Tablet");

for (String p : set) {
    System.out.println(p);
}


```

### üìò Explica√ß√£o:

1. Adiciona tr√™s elementos ao conjunto: `"Tv"`, `"Notebook"`, `"Tablet"`.

2. Remove `"Tablet"` do conjunto com `remove("Tablet")`.

3. Itera e imprime os elementos restantes no conjunto.

**Notas conforme o Java Tutorials:**
* `add(E e)` adiciona um elemento, retornando `false` se o elemento j√° existir.
* `remove(Object o)` remove um elemento espec√≠fico, se existir.
* A **ordem de impress√£o n√£o √© garantida** em `HashSet`.


---


## ‚úÖ Exemplo 02:

set.add("Tv");
set.add("Notebook");
set.add("Tablet");

set.removeIf(x -> x.length() >= 3);
```

### üìò Explica√ß√£o:

1. Adiciona tr√™s elementos ao conjunto: `"Tv"`, `"Notebook"`, `"Tablet"`.

2. `removeIf` usa uma **express√£o lambda** para remover todos os elementos cujo comprimento (`length`) √© maior ou igual a 3.

   * `"Tv"` tem 2 caracteres ‚Üí permanece.
   * `"Notebook"` e `"Tablet"` t√™m mais de 3 ‚Üí s√£o removidos.

**Notas conforme o Java Tutorials:**
* `removeIf(Predicate<? super E> filter)` est√° presente em `Collection` (interface m√£e de `Set`).
* A fun√ß√£o lambda `x -> x.length() >= 3` √© uma forma concisa de usar **fun√ß√µes como objetos**, conforme introduzido em Java 8.


---


## ‚úÖ Exemplo 03:

set.add("Tv");
set.add("Notebook");
set.add("Tablet");

set.removeIf(x -> x.charAt(0) >= 'T');
```

### üìò Explica√ß√£o:

1. Adiciona tr√™s elementos ao conjunto: `"Tv"`, `"Notebook"`, `"Tablet"`.
2. Remove os que come√ßam com uma letra maior ou igual a `'T'` na tabela ASCII.

   * `"Notebook"` come√ßa com `'N'` (antes de `'T'`) ‚Üí permanece.
   * `"Tv"` come√ßa com `'T'` ‚Üí √© removido.
   * `"Tablet"` come√ßa com `'T'` ‚Üí √© removido.

**Notas conforme o Java Tutorials:**
* `charAt(0)` retorna o primeiro caractere de cada `String`.
* A compara√ß√£o `>= 'T'` usa o valor Unicode (ou ASCII) dos caracteres.
* A ordena√ß√£o lexicogr√°fica √© baseada nesses valores num√©ricos.
* O m√©todo `removeIf` permite **filtrar** elementos com base em **predicados**, aproveitando os recursos de **lambda expressions**.

*/
